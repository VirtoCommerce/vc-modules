name: Stable platform

on:
  workflow_dispatch:
  push:
    # paths:
    #   - 'bundles/latest/**'
    branches: 
      - 'master,test-VCST-3877'

jobs:
  gitops:
    runs-on: ubuntu-latest
    env:
      ARGO_APP_NAME: ${{ github.ref_name }}

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        persist-credentials: true

    - name: Check BundleVersion changes
      shell: pwsh
      run: |
        # $commitSha = "31dd3911f76363d8f6716861ae41a1b3d894068a"
        $commitSha =  "${{ github.sha }}"
        # git config --global user.email "VC-CI@virto.com"
        # git config --global user.name "VC-CI"
        
        [System.Version]$oldVersion = git show "$commitSha^:bundles/latest/package.json" | ConvertFrom-Json | Select-Object -ExpandProperty BundleVersion
        
        [System.Version]$newVersion = git show "$commitSha`:bundles/latest/package.json" | ConvertFrom-Json | Select-Object -ExpandProperty BundleVersion
        
        Write-Host "Previous commit BundleVersion: $oldVersion"
        Write-Host "Current commit BundleVersion: $newVersion"
        
        if ($newVersion -le $oldVersion) {
          Write-Host "BundleVersion was not changed in the last commit. Bumping the version..."
          $packageJson = Get-Content ./bundles/latest/package.json | ConvertFrom-Json
          $oldVersion = $packageJson.BundleVersion
          $bumpVersion = [System.Version]::new($oldVersion.Major, $oldVersion.Minor, $oldVersion.Build + 1)
          $packageJson.BundleVersion = $bumpVersion.ToString()
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content ./bundles/latest/package.json
          Write-Host "New BundleVersion: $bumpVersion. Committing and pushing..."
          git add ./bundles/latest/package.json
          if ($lastExitCode -ne 0) { throw "Failed to add file to git" }
          git commit -m "[skip ci] Automatic bump of BundleVersion to $bumpVersion"
          if ($lastExitCode -ne 0) { throw "Failed to commit changes" }
          git push
          if ($lastExitCode -ne 0) { throw "Failed to push changes" }
          Write-Host "Committed and pushed successfully"
        } else {
          Write-Host "BundleVersion was changed from $oldVersion to $newVersion"
        }

    - name: Get bundle version
      shell: pwsh
      run: |
        $bundleVersion = (Get-Content ./bundles/latest/package.json | ConvertFrom-Json).BundleVersion
        echo "BUNDLE_VERSION=$bundleVersion"
        if ($bundleVersion -eq $null) {
          throw "Bundle version is null"
        } else {
          echo "BUNDLE_VERSION=$bundleVersion" >> $env:GITHUB_ENV
        }
  
    # - name: Az config
    #   run: |
    #     az config set extension.use_dynamic_install=yes_without_prompt
    
    # - name: Install vc-build
    #   run: |
    #     dotnet tool install --global VirtoCommerce.GlobalTool

    # - name: Pack
    #   run: |
    #     vc-build install -PackageManifestPath ./bundles/latest/package.json -ProbingPath ./backend/platform/app_data/modules -DiscoveryPath ./backend/platform/modules --root ./backend/platform -SkipDependencySolving

    # - name: Get Dockerfile
    #   run: |
    #     git clone -b feat/net8 https://github.com/VirtoCommerce/vc-docker.git
    #     mv ./backend/platform ./vc-docker/linux/platform/publish

    # - name: Build and Publish Docker Image
    #   working-directory: ./vc-docker/linux/platform
    #   run: |
    #     vc-build BuildAndPush -DockerUsername $DOCKER_LOGIN -DockerPassword $DOCKER_PASSWORD -DockerfilePath $DOCKERFILE_PATH -DockerImageName $IMAGE_REPOSITORY -DockerImageTag $TAG -DockerRegistryUrl $CONTAINER_REGISTRY
    #     docker tag $IMAGE_REPOSITORY:$TAG $IMAGE_REPOSITORY:$LATEST_TAG
    #     docker push $IMAGE_REPOSITORY:$LATEST_TAG
    #   env:
    #     DOCKER_LOGIN: VirtoPaaSRegistryMain
    #     DOCKER_PASSWORD: ${{ secrets.MAIN_DOCKER_PASSWORD }}
    #     DOCKERFILE_PATH: ./Dockerfile
    #     CONTAINER_REGISTRY: virtopaasregistrymain.azurecr.io
    #     IMAGE_REPOSITORY: virtopaasregistrymain.azurecr.io/saas/platform
    #     TAG: ${{ env.BUNDLE_VERSION }}-stable
    #     LATEST_TAG: latest-stable